/**
	This microbenchmark is used to measure instruction latency
	Reference: https://www.agner.org/optimize/
	26/10/2013 by Jianbin Fang at Delft University of Technology
**/

#include <stdio.h>
#define NUMTESTS 20


void Lat (int64_t clocks[]) {
   int64_t before, overhead;
   int i;

   // to get the measure overhead
   for (i = 0; i < NUMTESTS; i++) {
      before = ReadTSC();     
      clocks[i] = ReadTSC() - before;
   }

   // find minimum overhead
   overhead = clocks[0];
   for (i = 0; i < NUMTESTS; i++) {
      if (clocks[i] < overhead) overhead = clocks[i];
   }

   // loop to measure clock cycles of test code
   for (i = 0; i < NUMTESTS; i++) {
      before = ReadTSC();                   // clock count before


   __asm__ __volatile__ (
   " .intel_syntax noprefix \n"  // Switch to Intel syntax
   " .rept 100              \n"  // Repeat if needed

   //" shr eax,1              \n"  // Instruction to test
   //" vaddpd %zmm0, %zmm1, %zmm0              \n"
   //" vcmppd %k2, %zmm0, %zmm1, 000              \n"
   //" vexp223ps zmm1, zmm2	\n"
   
   
   /**
	mask instructions	
	**/
   //" kand k1, k2 \n" " kand k2, k1 \n" 				// Jianbin: 393/200=2
   //" kandn k1, k2 \n" " kandn k2, k1 \n"  
   //" kandnr k1, k2 \n" " kandnr k2, k1 \n"

   //" kconcath r8, k1, k2 \n"

   //" kmov k1, k2 \n" " kmov k2, k1 \n"
   //" knot k1, k2 \n" " knot k2, k1 \n"
   //" kor k1, k2 \n" " kor k2, k1 \n"
   //" kxnor k1, k2 \n" " kxnor k2, k1 \n"
   //" kxor k1, k2 \n" " kxor k2, k1 \n"
   /**
	vector instructions	
	**/
   //" vaddnpd zmm0, zmm1, zmm0 \n"
   //" vaddnps zmm0, zmm1, zmm0 \n"					// Jianbin: 390/100=4
   //" vaddpd zmm0, zmm1, zmm0{cccc} \n"   				// Jianbin:
   // " vaddpd zmm0, zmm0, zmm1{dcab} \n"   				// Jianbin:  
   //" vblendmpd zmm0 {k1}, zmm1, zmm0 \n" 				// Jianbin: 390
   //" vfmadd213pd zmm0, zmm1, zmm2 \n" 				// Jianbin: 390
   //" vmulpd zmm0, zmm1, zmm0 \n"	 				// Jianbin: 390
   //" vpandd zmm0, zmm1, zmm0 \n"	 				// Jianbin: 390
   //" vpcmpd k2, zmm1, zmm2, 000 \n"					// Jianbin: difficult to measure
   //" vpord zmm0, zmm1, zmm0 \n"					// Jianbin: 390
   //" vpslld zmm1, zmm1, 1 \n"						// Jianbin: 390
   //" vscaleps zmm0, zmm0, zmm1 \n"					// Jianbin: 390

   //" vcvtdq2pd zmm0, zmm1 \n" " vcvtfxpntpd2dq zmm1, zmm0, 01 \n"  	// jianbin: int32 <-> float64 1087/200=5
   //" vcvtps2pd zmm0, zmm1 \n" " vcvtpd2ps zmm1, zmm0 \n"  		// jianbin: float32 <-> float64 1087/200=5  

   //" vexp223ps zmm0, zmm1 \n" " vlog2ps zmm1, zmm0 \n"		// Jianbin: 1188/200=6
   @instruction
   //" vrcp23ps zmm0, zmm1 \n" " vrcp23ps zmm1, zmm0 \n"		// Jianbin: 1188/200=6
   //" vrsqrt23ps zmm0, zmm1 \n" " vrsqrt23ps zmm1, zmm0 \n"		// Jianbin: 1188/200=6   

   // gather & scatter
   // load & store

   // max, min
   //" vgmaxpd zmm0, zmm1, zmm0 \n"					// Jianbin: 390/100=4
   //" vgmaxabsps zmm0, zmm1, zmm0 \n"					// Jianbin: 390/100=4

   //" vmovapd zmm0, zmm1 \n" " vmovapd zmm1, zmm0 \n"			// Jianbin: 790/200=4

   //" vpermd zmm0, zmm1, zmm0 \n" 					// Jianbin: 580/100=6
   //" vpermf32x4 zmm1, zmm1, 01 \n"					// Jianbin: 588/100=6

   // scalar instructions


   " .endr                  \n"  // End of repeat
   " .att_syntax prefix     \n"  // Switch back to AT&T syntax
   );

      
      clocks[i] = ReadTSC() - before;       // clock count after
   }

   // subtract overhead from clock counts
   for (i = 0; i < NUMTESTS; i++) {
      clocks[i] -= overhead;
   }
}


int main() {

   int64_t clocklist[NUMTESTS];
   int i;
   double cycles = 0.0;

   // run latency tests
   Lat(clocklist);

   // print results
   for(i=1; i<NUMTESTS; i++){ // ignore the first run to warmup
	cycles += (double)(clocklist[i]);
   }

   printf("@instruction: %lf\n", cycles/(double)(NUMTESTS-1));
   return 0;
}
